"""
Django settings for inmuebles project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""


# YO | configuracion y pasos para hacer deploy con RENDER: https://docs.render.com/deploy-django


from pathlib import Path
from datetime import timedelta

import os # por RENDER
import dj_database_url # por RENDER

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret! 
# SECRET_KEY = 'django-insecure-b7sc$s$1!x(8n3me63zs@z()xda8lg+2clrywxmx%oe@gaw^1b' # por RENDER
# por render comenter -> SECRET_KEY 
SECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key') # por RENDER


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True # por RENDER
DEBUG = 'RENDER' not in os.environ # por RENDER

ALLOWED_HOSTS = []

# por RENDER: ------
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
# ------------------

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # aplicaciones personalizadas y creadas:
    'inmueblesList_app',
    'user_app',
    
    'rest_framework',
    'rest_framework.authtoken', # y hacer un -> python manage.py migrate, para que aparesca en el DjangoAdminstration
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # por RENDER
]

ROOT_URLCONF = 'inmuebles.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'inmuebles.wsgi.application'

AUTH_USER_MODEL = 'user_app.Account' # indicándole cuál es la nueva clase que va a administrar los usuarios.


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# sqlite:
# para conectar a posgreSQL: pip install psycopg2-binary
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# PostgreSQL:
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'django_inmuebles',
#         'USER':'williams392',
#         'PASSWORD':'1234',
#         'HOST':'localhost',
#         'PORT':'5432'
#     }
# }

# DATABASE_URL=postgresql://williams392:1234@localhost:5432/django_inmuebles
# Deploy por RENDER:
DATABASES = {
    'default': dj_database_url.config(
        default='postgresql://williams392:1234@localhost:5432/django_inmuebles',
        conn_max_age=600
    )
}


# Haciendo deploy dentro de los servidores de -> HEROKU no se puedo ahora es de PAGA:
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'USER': 'zfevkeovdmuxcl',
#         'NAME': 'd543vfkft9sspl',
#         'PASSWORD': '6e04338ffa615cadb25b8778a889b3819bcd26267fcab2ccd778de8144615b90',
#         'HOST': 'ec2-52-22-81-147.compute-1.amazonaws.com'
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# por RENDER: --------------
# Este código de producción podría interrumpir el modo de desarrollo, por lo que verificamos si estamos en modo DEBUG.
if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# --------------------------


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#-----------------------------------------------------------------------
# Ahora en adelanto solamente un USUARIO va a tener acceso alas funciones 
# y clases del proyecto despues de haberse logueado:
# pagina -> https://www.django-rest-framework.org/api-guide/permissions/
#----------------------------------------------------------------------- 
# REST_FRAMEWORK = { 
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#     ]
# }
#-----------------------------------------------------------------------

REST_FRAMEWORK = {
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    #     'rest_framework.authentication.BasicAuthentication',
    # ]
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ], 
    # Establecer la política de limitación con 'THROTTLING' -> https://www.django-rest-framework.org/api-guide/throttling/
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',
    #     'rest_framework.throttling.UserRateThrottle'
    # ], ----------------------------------------------
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1000/day',
        'user': '1000/day',
        'comentario-create': '200/day',
        'comentario-list': '3000/day',
        'comentario-detail': '1000/day',
    },
    'DEFAULT_RENDERER_CLASSES': ( # con esto la vista de la API se renderizarán como JSON de forma predeterminada.
        'rest_framework.renderers.JSONRenderer', 
    ),
    #'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', # para que de formato de paginacion
    #'PAGE_SIZE': 1,
}

SIMPLE_JWT = {
    'ROTATE_REFRESH_TOKENS': True,
    'ACCESS_TOKEN_LIFETIME': timedelta(days=365),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=365),

}